import java.io.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.Collectors;

// User class
class User implements Serializable {
    private String username;
    private String password;
    private List<Expense> expenses;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.expenses = new ArrayList<>();
    }

    // Getters and setters
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public List<Expense> getExpenses() {
        return expenses;
    }

    public void addExpense(Expense expense) {
        this.expenses.add(expense);
    }

    public void removeExpense(Expense expense) {
        this.expenses.remove(expense);
    }
}

// Expense class
class Expense implements Serializable {
    private LocalDate date;
    private String category;
    private double amount;

    public Expense(LocalDate date, String category, double amount) {
        this.date = date;
        this.category = category;
        this.amount = amount;
    }

    // Getters and setters
    public LocalDate getDate() {
        return date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }

    @Override
    public String toString() {
        return "Expense{" +
                "date=" + date +
                ", category='" + category + '\'' +
                ", amount=" + amount +
                '}';
    }
}

// ExpenseManager class
class ExpenseManager implements Serializable {
    private List<User> users;

    public ExpenseManager() {
        this.users = new ArrayList<>();
    }

    // User registration
    public void registerUser(String username, String password) {
        users.add(new User(username, password));
    }

    // User login
    public Optional<User> loginUser(String username, String password) {
        return users.stream()
                .filter(user -> user.getUsername().equals(username) && user.getPassword().equals(password))
                .findFirst();
    }

    // Save data to file
    public void saveData(String filename) throws IOException {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filename))) {
            out.writeObject(this);
        }
    }

    // Load data from file
    public static ExpenseManager loadData(String filename) throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(filename))) {
            return (ExpenseManager) in.readObject();
        }
    }
}

// Main application class
public class ExpenseApp {
    private static final String DATA_FILE = "expenses.dat";
    private static User currentUser;

    public static void main(String[] args) {
        ExpenseManager manager = loadManager();

        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Register User");
            System.out.println("2. Login");
            System.out.println("3. Add Expense");
            System.out.println("4. List Expenses");
            System.out.println("5. Delete Expense");
            System.out.println("6. Calculate Total by Category");
            System.out.println("7. Save and Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter username: ");
                    String username = scanner.nextLine();
                    System.out.print("Enter password: ");
                    String password = scanner.nextLine();
                    manager.registerUser(username, password);
                    break;
                case 2:
                    System.out.print("Enter username: ");
                    username = scanner.nextLine();
                    System.out.print("Enter password: ");
                    password = scanner.nextLine();
                    Optional<User> user = manager.loginUser(username, password);
                    if (user.isPresent()) {
                        currentUser = user.get();
                        System.out.println("Login successful!");
                    } else {
                        System.out.println("Invalid username or password.");
                    }
                    break;
                case 3:
                    if (currentUser != null) {
                        System.out.print("Enter date (YYYY-MM-DD): ");
                        LocalDate date = LocalDate.parse(scanner.nextLine());
                        System.out.print("Enter category: ");
                        String category = scanner.nextLine();
                        System.out.print("Enter amount: ");
                        double amount = scanner.nextDouble();
                        currentUser.addExpense(new Expense(date, category, amount));
                    } else {
                        System.out.println("Please log in first.");
                    }
                    break;
                case 4:
                    if (currentUser != null) {
                        System.out.println("Expenses:");
                        currentUser.getExpenses().forEach(System.out::println);
                    } else {
                        System.out.println("Please log in first.");
                    }
                    break;
                case 5:
                    if (currentUser != null) {
                        System.out.println("Expenses:");
                        List<Expense> expenses = currentUser.getExpenses();
                        for (int i = 0; i < expenses.size(); i++) {
                            System.out.println((i + 1) + ". " + expenses.get(i));
                        }
                        System.out.print("Enter the number of the expense to delete: ");
                        int index = scanner.nextInt();
                        if (index > 0 && index <= expenses.size()) {
                            currentUser.removeExpense(expenses.get(index - 1));
                            System.out.println("Expense deleted.");
                        } else {
                            System.out.println("Invalid index.");
                        }
                    } else {
                        System.out.println("Please log in first.");
                    }
                    break;
                case 6:
                    if (currentUser != null) {
                        System.out.print("Enter category: ");
                        String category = scanner.nextLine();
                        double total = currentUser.getExpenses().stream()
                                .filter(expense -> expense.getCategory().equalsIgnoreCase(category))
                                .mapToDouble(Expense::getAmount)
                                .sum();
                        System.out.println("Total expenses for " + category + ": " + total);
                    } else {
                        System.out.println("Please log in first.");
                    }
                    break;
                case 7:
                    saveManager(manager);
                    System.exit(0);
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }

    private static ExpenseManager loadManager() {
        try {
            return ExpenseManager.loadData(DATA_FILE);
        } catch (IOException | ClassNotFoundException e) {
            return new ExpenseManager();
        }
    }

    private static void saveManager(ExpenseManager manager) {
        try {
            manager.saveData(DATA_FILE);
        } catch (IOException e) {
            System.err.println("Failed to save data: " + e.getMessage());
        }
    }
}
